import tkinter as tk
from tkinter import messagebox, filedialog


class vkGUI:
    def __init__(self, master):
        master.title('Voight-Kampff')
        self.main_frame = tk.Frame(master,
                                   width=100,
                                   height=100)
        #todo get key binding to work properly!
        self.main_frame.bind("<Key>", self.handler)
        self.main_frame.grid()

        self.create_widgets(self.main_frame)

    def create_widgets(self, main):

        ### File selection ###
        self.b1 = tk.Button(main,
                            text='Select file',
                            underline=0,
                            command=self.open)
        self.b1.grid(row=0, padx=10, pady=15, sticky='W')

        self.e1 = tk.Entry(main,
                           width=37,
                           state="readonly")
        self.e1.grid(row=0, column=1, padx=10)


        ### JITTER INPUT ###
        self.v1 = tk.LabelFrame(main,
                                text='Jitter',
                                padx=10,
                                pady=10)
        self.v1.columnconfigure(0, minsize=100)
        self.v1.grid(row=1, padx=10, pady=5, columnspan=2)


        ## jitter percent ##
        self.jitter_percent_label = tk.Label(self.v1)
        self.jitter_percent_label.grid(row=0, sticky='E')

        self.jitter_percent_slider = tk.Scale(self.v1,
                                              to=1,
                                              showvalue=0,
                                              orient="horizontal",
                                              digits=3,
                                              resolution=0.01,
                                              length=200,
                                              command=self.update_jp_label)
        self.jitter_percent_slider.grid(row=0, column=1, sticky='W')

        ## jitter velocity ##
        self.jitter_velocity_label = tk.Label(self.v1)
        self.jitter_velocity_label.grid(row=1, sticky='E')

        self.jitter_velocity_slider = tk.Scale(self.v1,
                                               to=1,
                                               showvalue=0,
                                               orient="horizontal",
                                               digits=3,
                                               resolution=0.01,
                                               length=200,
                                               command=self.update_jv_label)
        self.jitter_velocity_slider.grid(row=1, column=1, sticky='W')

        ## jitter acceleration ##
        self.jitter_acceleration_label = tk.Label(self.v1)
        self.jitter_acceleration_label.grid(row=2, sticky='E')

        self.jitter_acceleration_slider = tk.Scale(self.v1,
                                                   to=1,
                                                   showvalue=0,
                                                   orient="horizontal",
                                                   digits=3,
                                                   resolution=0.01,
                                                   length=200,
                                                   command=self.update_ja_label)
        self.jitter_acceleration_slider.grid(row=2, column=1, sticky='W')

        ## jitter distance ##
        self.jitter_distance_label = tk.Label(self.v1)
        self.jitter_distance_label.grid(row=3, sticky='E')

        self.jitter_distance_slider = tk.Scale(self.v1,
                                               to=1,
                                               showvalue=0,
                                               orient="horizontal",
                                               digits=3,
                                               resolution=0.01,
                                               length=200,
                                               command=self.update_jd_label)
        self.jitter_distance_slider.grid(row=3, column=1, sticky='W')

        ## jitter wait ##
        self.jitter_wait_label = tk.Label(self.v1)
        self.jitter_wait_label.grid(row=4, sticky='E')

        self.jitter_wait_slider = tk.Scale(self.v1,
                                           to=1,
                                           showvalue=0,
                                           orient="horizontal",
                                           digits=3,
                                           resolution=0.01,
                                           length=200,
                                           command=self.update_jw_label)
        self.jitter_wait_slider.grid(row=4, column=1, sticky='W')

        ## jitter skip ##
        self.jitter_skip_label = tk.Label(self.v1)
        self.jitter_skip_label.grid(row=5, sticky='E')

        self.jitter_skip_slider = tk.Scale(self.v1,
                                           to=1,
                                           showvalue=0,
                                           orient="horizontal",
                                           digits=3,
                                           resolution=0.01,
                                           length=200,
                                           command=self.update_js_label)
        self.jitter_skip_slider.grid(row=5, column=1, sticky='W')


        ### Amnesia input ###
        self.v2 = tk.LabelFrame(main, text='Amnesia', padx=10, pady=10)
        self.v2.grid_columnconfigure(0, minsize=100)
        self.v2.grid(row=2, padx=10, pady=5, columnspan=2)


        ## amnesia percent ##
        self.amnesia_percent_label = tk.Label(self.v2)
        self.amnesia_percent_label.grid(row=0, sticky='E')

        self.amnesia_percent_slider = tk.Scale(self.v2,
                                               to=1,
                                               showvalue=0,
                                               orient="horizontal",
                                               digits=3,
                                               resolution=0.01,
                                               length=200,
                                               command=self.update_ap_label)
        self.amnesia_percent_slider.grid(row=0, column=1, sticky='W')

        ## amnesia skip ##
        self.amnesia_skip_label = tk.Label(self.v2)
        self.amnesia_skip_label.grid(row=1, sticky='E')

        self.amnesia_skip_slider = tk.Scale(self.v2,
                                            to=1,
                                            showvalue=0,
                                            orient="horizontal",
                                            digits=3,
                                            resolution=0.01,
                                            length=200,
                                            command=self.update_as_label)
        self.amnesia_skip_slider.grid(row=1, column=1, sticky='W')

        ### Decay input ###
        self.v3 = tk.LabelFrame(main, text='Decay', padx=10, pady=10)
        self.v3.columnconfigure(0, minsize=100)
        self.v3.grid(row=3, padx=10, pady=5, columnspan=2)

        ## decay percent ##
        self.decay_percent_label = tk.Label(self.v3)
        self.decay_percent_label.grid(row=0, sticky='E')

        self.decay_percent_slider = tk.Scale(self.v3,
                                             to=1,
                                             showvalue=0,
                                             orient="horizontal",
                                             digits=3,
                                             resolution=0.01,
                                             length=200,
                                             command=self.update_dp_label)
        self.decay_percent_slider.grid(row=0, column=1, sticky='W')

        ## decay wait ##
        self.decay_wait_label = tk.Label(self.v3)
        self.decay_wait_label.grid(row=1, sticky='E')

        self.decay_wait_slider = tk.Scale(self.v3,
                                          to=1,
                                          showvalue=0,
                                          orient="horizontal",
                                          digits=3,
                                          resolution=0.01,
                                          length=200,
                                          command=self.update_dw_label)
        self.decay_wait_slider.grid(row=1, column=1, sticky='W')

        ### Buttons at the bottom ###
        self.b2 = tk.Button(main,
                            text='Run VK test',
                            underline=0,)
        self.b2.grid(row=4, padx=10, pady=5)

        self.b3 = tk.Button(main,
                            text='About',
                            underline=0,
                            command=self.info)
        self.b3.grid(row=4, column=1, padx=10, pady=5)

    ### Command definitions ###

    def handler(self, event):
        print("keypress")
        if event.char == 'a':
            self.info()

    def open(self):
        options = {'title': 'Select file to open',
                   'defaultextension': '.src',
                   'filetypes': [('KRL files', '.src')],
                   'initialdir': 'C:\\'}
        update_text = filedialog.askopenfilename(**options)

        self.e1.configure(state='normal')
        self.e1.delete(0, -1)
        self.e1.insert(0, update_text)
        self.e1.configure(state='readonly')

    def info(self):
        return messagebox.showinfo("Voight-Kampff v1.0",
                                   "Developed by Aaron Willette of Kh√¥ra LLC\n\nDistributed under a "
                                   "Creative Commons License")

    def update_jp_label(self, new_value):
        update_text = "Percent: " + "{0:.2f}".format(float(new_value))
        self.jitter_percent_label.configure(text=update_text)

    def update_jv_label(self, new_value):
        update_text = "Velocity: " + "{0:.2f}".format(float(new_value))
        self.jitter_velocity_label.configure(text=update_text)

    def update_ja_label(self, new_value):
        update_text = "Acceleration: " + "{0:.2f}".format(float(new_value))
        self.jitter_acceleration_label.configure(text=update_text)

    def update_jd_label(self, new_value):
        update_text = "Distance: " + "{0:.2f}".format(float(new_value))
        self.jitter_distance_label.configure(text=update_text)

    def update_jw_label(self, new_value):
        update_text = "Wait: " + "{0:.2f}".format(float(new_value))
        self.jitter_wait_label.configure(text=update_text)

    def update_js_label(self, new_value):
        update_text = "Skip: " + "{0:.2f}".format(float(new_value))
        self.jitter_skip_label.configure(text=update_text)

    def update_ap_label(self, new_value):
        update_text = "Percent: " + "{0:.2f}".format(float(new_value))
        self.amnesia_percent_label.configure(text=update_text)

    def update_as_label(self, new_value):
        update_text = "Skip: " + "{0:.2f}".format(float(new_value))
        self.amnesia_skip_label.configure(text=update_text)

    def update_dp_label(self, new_value):
        update_text = "Percent: " + "{0:.2f}".format(float(new_value))
        self.decay_percent_label.configure(text=update_text)

    def update_dw_label(self, new_value):
        update_text = "Wait: " + "{0:.2f}".format(float(new_value))
        self.decay_wait_label.configure(text=update_text)


root = tk.Tk()
main_gui = vkGUI(root)
root.mainloop()
